import asyncio
import logging
import sys
import random
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from threading import Thread

TOKEN = "7595011311:AAFRmsvGrXDPboyipgf7tLuWPBKShje6gSo"
ALLOWED_CHAT_ID = -1002009840380

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
current_anime_index = 0
is_game_active = False
reserve_anime_list = []
player_scores = {}

anime_list = [
    {"name": "Наруто",
     "description": "История мальчика с внутренним демоном, который стремится стать лидером своей деревни."},
    {"name": "Атака титанов",
     "description": "Человечество борется с гигантами, которые угрожают их выживанию за стенами."},
    {"name": "Ван Пис",
     "description": "Пират отправляется в море, чтобы стать королем пиратов и найти легендарное сокровище."},
    {"name": "Тетрадь смерти",
     "description": "Молодой человек использует сверхъестественную тетрадь, чтобы вершить свое правосудие."},
    {"name": "Блич",
     "description": "Подростку дарует силу богиня смерти , он вступает в схватку с злым духом пожирающим души людей\nВсе это по плану великого... ."},
    {"name": "Код Гиас",
     "description": "Гениальный стратег получает способность подчинять людей своей воле и начинает революцию."},
    {"name": "Магическая битва",
     "description": "Школьник живёт обычной жизнью, но в какой-то момент у него умирает единственный близкий человек, но перед смертью он пообещал помогать всем нуждающимся, спустя время на его друзей нападет проклятие наш герой кушает старый проклятый палец..."},
    {"name": "Токийский гуль",
     "description": "Студент становится полугулем и вынужден выживать в мире монстров и людей."},
    {"name": "Семь смертных грехов",
     "description": "Рыцари, обладающие невероятной силой, пытаются восстановить честь и спасти королевство."},
    {"name": "Хантер х Хантер",
     "description": "Мальчик становится охотником, чтобы найти своего отца и узнать тайны этого мира."},
    {"name": "Эльфийская песнь",
     "description": "Существо с опасными силами убегает из лаборатории и пытается найти себя 18+."},
    {"name": "Стальной алхимик",
     "description": "Братья алхимики ищут философский камень, чтобы вернуть утраченные тела."},
    {"name": "Клинок, рассекающий демонов",
     "description": "Мальчик становится охотником на демонов, чтобы спасти свою сестру."},
    {"name": "Реинкарнация безработного",
     "description": "Безработный мужчина получает второй шанс на жизнь в волшебном мире."},
    {"name": "Гуррен-Лаганн",
     "description": "Жители подземного города выходят на поверхность, чтобы сражаться с зверо-людьми."},
    {"name": "Евангелион",
     "description": "Подросток становится пилотом гигантского робота, чтобы спасти мир от ангелов."},
    {"name": "Черный клевер",
     "description": "Юноша, лишенный магии, мечтает стать сильнейшим магом в своем королевстве."},
    {"name": "О моём перерождении в слизь",
     "description": "Наш герой пожертвовал своей жизнью, спасая девушку, но герой переродился в другом мире слизью...."},
    {"name": "Моя геройская академия",
     "description": "Мальчик без суперспособностей стремится стать величайшим героем."},
    {"name": "Башня Бога",
     "description": "Парень отправляется в загадочную башню, чтобы найти свою подругу и ответы, но сталкивается с предательством."},
    {"name": "Сага о Винланде",
     "description": "История юноши, который становится частью мира викингов и ищет путь мести, а потом поцефист."},
    {"name": "САО",
     "description": "Игроки застревают в виртуальной игре, где смерть в игре означает смерть в реальности."},
    {"name": "Крутой учитель Онидзука",
     "description": "Бывший байкер становится учителем и меняет жизни своих учеников."},
    {"name": "Паразит",
     "description": "Подросток становится носителем инопланетного паразита и пытается защитить мир от таких же существ."},
    {"name": "Монстр", "description": "Врач становится жертвой своих решений и отправляется на поиски истинного зла."},
    {"name": "Книга друзей Нацумэ",
     "description": "Мальчик, который видит духов, наследует загадочную книгу с именами этих существ."},
    {"name": "Дороро",
     "description": "Мальчик с проклятым телом отправляется в путешествие, чтобы вернуть свои украденные части тела."},
    {"name": "Ванпачмен",
     "description": "Наш герой превозмогает через невозможные тренировки и становится самым сильным в мире. Но какой интерес быть самым сильным?"},
    {"name": "Класс убийц",
     "description": "Правительство собирает школьников, чтобы убить сильнейшего монстра (он будет обучать их 1 год). Смогут ли наши герои?"},
    {"name": "Аригато",
     "description": "История о юноше, который проходит через потери и находит смысл в искренних взаимоотношениях."},
    {"name": "Обещанный Неверленд",
     "description": "Дети из приюта узнают, что их мир не так безопасен, как они думали."},
    {"name": "Ещё вчера", "description": "Романтическая история о встрече молодых людей с разным прошлым."},
    {"name": "Наруто Ураганные хроники",
     "description": "Юноша возвращается после тренировок, чтобы завершить свою миссию и спасти друга."},
    {"name": "Семья шпиона",
     "description": "Семья, где каждый скрывает свои секреты, пытается сосуществовать, не раскрывая истинных целей."},
    {"name": "Хеллсинг",
     "description": "Организация охотников на вампиров защищает Англию от сверхъестественных угроз, но в их рядах сильнейший вампир...."},
    {"name": "Великий из бродячих псов",
     "description": "Члены детективного агентства с особыми способностями расследуют загадочные случаи."},
    {"name": "Шаман Кинг", "description": "Мальчик сражается за титул короля шаманов, используя духов своих предков."},
    {"name": "Берсерк",
     "description": "Наемник сражается с демонами и людьми в мрачном фэнтези-мире, чтобы отомстить."},
    {"name": "Класс убийц", "description": "Класс старшеклассников обучается убивать своего учителя-инопланетянина."},
    {"name": "Судьба: Начало",
     "description": "Маги и герои прошлого борются за могущественный артефакт. Судьба постная серия."},
    {"name": "Эхо террора",
     "description": "Двое загадочных подростков устраивают террористические атаки, чтобы раскрыть правду о правительстве."},
    {"name": "Бакуман", "description": "Двое школьников мечтают стать успешными мангаками."},
    {"name": "Реинкарнация слабейшего в могущественного",
     "description": "Мальчик из нашего мира обретает силу в фантастическом мире и становится легендой. Из слабейшего в могущественного."},
    {"name": "Детектив Конан",
     "description": "Школьник-детектив превращается в ребенка, но продолжает раскрывать преступления."},
    {"name": "Ангельские ритмы!", "description": "Школьники борются за свои мечты в загробном мире."},
    {"name": "Рыцарь-вампир", "description": "Школа, где днем учатся люди, а ночью — вампиры."},
    {"name": "Игра Дарвина", "description": "Мобильная игра превращается в смертельное сражение в реальном мире."},
    {"name": "Акира", "description": "Киберпанковый мир, где эксперимент с подростком приводит к хаосу и катастрофам."},
    {"name": "Девушки и танки",
     "description": "Школьницы соревнуются в танковых боях, совмещая военную стратегию с повседневной жизнью."},
    {"name": "Сердцу хочется кричать", "description": "История о девочке, которая ищет способы выразить свои чувства."},
    {"name": "Чёрный кот", "description": "Наемник оставляет своё прошлое, чтобы стать защитником справедливости."},
    {"name": "Путь в звёздное небо", "description": "Трогательная история о школьной любви и астрономии."},
    {"name": "Принцесса Мононоке", "description": "Юноша оказывается втянут в войну между людьми и духами леса."},
    {"name": "Унесённые призраками",
     "description": "Девочка попадает в мир духов и работает в загадочной бане, чтобы спасти родителей."},
    {"name": "Мой сосед Тоторо", "description": "Дети встречают добрых лесных духов в сельской местности Японии."},
    {"name": "Пять сантиметров в секунду",
     "description": "Романтическая история о том, как расстояние влияет на отношения."},
    {"name": "Заботливая 800-летняя жена!",
     "description": "Юноша получает помощь от милой лисицы-духа в его повседневной жизни."},
    {"name": "Космический линкор Ямато",
     "description": "Экипаж старого линкора отправляется на спасение Земли в далёкий космос."},
    {"name": "Жемчуг дракона", "description": "Мальчик с хвостом путешествует, чтобы собрать магические шары."},
    {"name": "Тетрадь печали", "description": "Девушка рассказывает о потерях и своём пути к исцелению."},
    {"name": "Темный дворецкий",
     "description": "Мальчик заключает договор с демоном-дворецким, чтобы отомстить за свою семью."},
    {"name": "Легенда о героях галактики",
     "description": "Грандиозная космическая сага о войне между империей и демократией."},
    {"name": "Мэри и ведьмин цветок",
     "description": "Девочка находит магический цветок и попадает в школу волшебства."},
    {"name": "Психопаспорт",
     "description": "Мир, где преступления предотвращаются благодаря технологии, анализирующей психику людей."},
    {"name": "Шёпот сердца", "description": "Романтическая история подростков, вдохновлённая любовью к книгам фильм."},
    {"name": "Тетрадь счастья",
     "description": "Мальчик, который может менять судьбу людей, используя загадочную тетрадь."},
    {"name": " Ковбой бибоп", "description": "Наш герой зарабатывает жизнь охотясь за головами, в космическом мире."},
    {"name": "Дандандан",
     "description": "У нас есть 2 главных героев девушка и парень , 1 верит в призраков другой в  пришельцев."},
    {"name": "Спираль", "description": "В обычном городишке  появляется спиральная  напасть."},
    {"name": "Доктор стоун",
     "description": "Наши герои живут обычной жизнь ,но на мир обрушилось каменения и спустя 3000 лет наш герой восстал из каменной оболочки."},
    {"name": "Синяя тюрьма",
     "description": "В странное место приглашают неудавшихся бомбардиров  и делают из них лучших футболистов свой страны."},
    {"name": "Боец баки", "description": "Сын тренируется  чтобы побить батю."},
    {"name": "Пять сантиметров в секунду",
     "description": "Романтическая история о том, как расстояние влияет на отношения(пиздец тут название)."},
    {"name": "Заботливая 800-летняя жена!",
     "description": "Юноша получает помощь от милой лисицы-духа в его повседневной жизни."},
    {"name": "Космический линкор Ямато",
     "description": "Экипаж старого линкора отправляется на спасение Земли в далёкий космос."},
    {"name": "Жемчуг дракона",
     "description": "Мальчик с хвостом путешествует, чтобы собрать магические шары Сильный верс."},
    {"name": "Тетрадь печали",
     "description": "Девушка рассказывает о потерях и своём пути к исцелению Эх эти тетради."},
    {"name": "Темный дворецкий",
     "description": "Мальчик заключает договор с демоном-дворецким, чтобы отомстить за свою семью."},
    {"name": "Легенда о героях  галактики",
     "description": "Грандиозная космическая сага о войне между империей и демократией 100+ серий ."},
    {"name": "Мэри и ведьмин цветок",
     "description": "Девочка находит магический цветок и попадает в школу волшебства фильм."},
    {"name": "Психопаспорт",
     "description": "Мир, где преступления предотвращаются благодаря технологии, анализирующей психику людей."},
    {"name": "Шёпот сердца", "description": "Романтическая история подростков, вдохновлённая любовью к книгам фильм ."},
    {"name": "Тетрадь счастья",
     "description": "Мальчик, который может менять судьбу людей, используя загадочную тетрадь ."},
    {"name": " Ковбой бибоп", "description": "Наш герой зарабатывает жизнь охотясь за головами , в космическом мире."},
    {"name": "Дандандан",
     "description": "У нас есть 2 главных героев девушка и парень , 1 верит в призраков другой в пришельцев."},
    {"name": "Спираль", "description": "В обычном городишке появляется спиральная напасть... ."},
    {"name": "Доктор стоун",
     "description": "Наши герои живут обычной жизнь ,но на мир обрушилось каменения и спустя 3000 лет наш герой восстал из каменной оболочки."},
    {"name": "Синяя тюрьма",
     "description": "В странное место приглашают неудавшихся бомбардиров  и делают из них лучших футболистов свой страны."},
    {"name": "Боец баки", "description": "Сын тренируется чтобы побить батю."},
    {"name": "Ранга багровый",
     "description": "Драконы хотят уничтожить мир людей ,цель нашего героя УНИЧТОЖИТЬ ВСЕХ ДРАКОНОВ."},
    {"name": "Кайдзю номер", "description ": "В нашем мире происходят напряжения Кайдзю, наш герой скуф."},
    {"name": "Невеста чародея", "description": "Наш герой чародей покупает девушку и приводит ее домой."},
    {"name": "Летнее время",
     "description": "Наш герой приезжает в свою деревню на похороны подруги детства, но там его убивают и он перерождается вновь В чём же секрет этой деревни?."},
    {"name": "Борьба в прямом эфире",
     "description": "Нашего героя булят в школе и через какое-то время он находит странный ролик  по боевым искусствам где автор курица лол."},
    {"name": "Магия и мускулы", "description": "Наш герой живёт в мире без магии, но он очень сильный физически !!!."},
    {"name": "Поднятия уровня в одиночку", "description": "Во всем мире открылись врата и появились охотники!!!."},
    {"name": "убей или умри",
     "description": "девушка, путешествующая вместе с гигантской «половиной» ножниц в качестве оружия, похожей на алый клинок, для того, чтобы найти обладателя другой половины ножниц."},
    {"name": "Реинкарнация безработного", "description": "Скуф умер и переродился в магический мир младенцем."},
    {"name": "Школа мертвецов",
     "description": "Школьники учатся в школе и вдруг на мир обрушился зомби апокалипсис, цель школьников выжить (аниме этии)."},
    {"name": "Седьмой Киллер",
     "description": "Наш герой оказывается на яичном острове с потерянной памятью, из друзей у него только 2 синие курицы."},
    {"name": "моб психо 100",
     "description": "Наш герой школьник с эсперскими способностями , у него есть таблица эмоций."},
    {"name": "Созданный в бездне",
     "description": "Наша героиня мечтает покорить бездну(она в ней живёт) и ей подворачивается возможность."}
]


def create_hint_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Подсказка", callback_data="hint")]
    ])


@dp.message(Command('pravila_lilit'))
async def command_send_rules(message: Message) -> None:
    global ALLOWED_CHAT_ID
    if message.chat.id != ALLOWED_CHAT_ID:
        await message.answer("конфиденциальный бот чата Лилит")
        return
    await message.answer("https://t.me/lilit_LLT/1791674")


@dp.message(Command('kain_start'))
async def command_start_handler(message: Message) -> None:
    global is_game_active
    global current_anime_index
    global ALLOWED_CHAT_ID
    global reserve_anime_list

    print(message.chat.id)
    if message.chat.id != ALLOWED_CHAT_ID:
        await message.answer("конфиденциальный бот чата Лилит")
        return
    is_game_active = True
    if anime_list:  # Проверяем, что список аниме не пустой
        reserve_anime_list = anime_list.copy()
        current_anime_index = random.randrange(len(reserve_anime_list))
        await message.answer(
            "Добро пожаловать в чат Лилит. Теперь я твой главный помощник ,а также я провожу игры/квесты и викторины. Давай проведем время вместе!")
        await send_anime_description(message)
    else:
        await message.answer("Список аниме пуст. Добавьте аниме в список для начала игры.")


# Функция для отправки описания текущего аниме
async def send_anime_description(message: Message):
    global current_anime_index
    global reserve_anime_list

    if reserve_anime_list:  # Проверяем, что список не пуст
        anime = reserve_anime_list[current_anime_index]
        await message.answer(f"Угадай аниме по описанию:\n{anime['description']}", reply_markup=create_hint_keyboard())
    else:
        await message.answer("Все аниме были угаданы! Игра завершена.")
        await stop(message)


@dp.callback_query(F.data == "hint")
async def handle_hint(callback: CallbackQuery):
    global reserve_anime_list
    global current_anime_index
    global is_game_active

    if not is_game_active:
        return

    # Получаем текущее аниме
    if reserve_anime_list:
        current_anime = reserve_anime_list[current_anime_index]
        print(current_anime)
        await callback.message.answer(
            f"Подсказка: Первые буквы названия — {current_anime['name'][:2]}..."
        )
    await callback.answer()


@dp.message(Command('kain_stop'))
async def stop(message: Message):
    global is_game_active
    global ALLOWED_CHAT_ID
    global player_scores
    if message.chat.id != ALLOWED_CHAT_ID:
        return
    is_game_active = False
    await message.answer(f"Каин больше с Вами не играет!")
    # Отправляем рейтинг игроков в конце игры, упоминая их
    if player_scores:
        ranking = sorted(player_scores.items(), key=lambda x: x[1], reverse=True)
        ranking_message = "Рейтинг игроков:\n"
        for player, score in ranking:
            ranking_message += f"@{player}: {score} очков\n"
        await message.answer(ranking_message)
    else:
        await message.answer("Не было угадано ни одного аниме.")
    player_scores = {}


@dp.message()
async def echo(message: Message) -> None:
    global anime_list
    global ALLOWED_CHAT_ID
    if message.chat.id != ALLOWED_CHAT_ID:
        return
    global is_game_active
    global reserve_anime_list
    if is_game_active is True:
        global current_anime_index
        global player_scores
        if reserve_anime_list:  # Проверяем, что список не пустой
            answer = message.text.strip().lower()
            correct_answer = reserve_anime_list[current_anime_index]["name"].lower()

            if answer == correct_answer:
                player_name = message.from_user.username or message.from_user.first_name
                player_scores[player_name] = player_scores.get(player_name, 0) + 1  # увеличиваем балл
                await message.answer(f"@{player_name} Каин гордится тобой, правильно. 🎉")
                reserve_anime_list.pop(current_anime_index)

                if reserve_anime_list:  # Если в списке остались аниме
                    # Обновляем индекс в пределах новых границ списка
                    current_anime_index = random.randrange(len(reserve_anime_list))
                    await send_anime_description(message)
                else:
                    await message.answer("Каин тобой доволен! Все аниме угаданы.")
                    await stop(message)  # Заканчиваем игру
        else:
            await stop(message)


async def main() -> None:
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
